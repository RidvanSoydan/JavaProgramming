Java Day36
Topic: Inheritance Intro

package name: day36_Inheritance

warmup tasks:

	1. Create a class named Student:
			private variables:
				name, age, gender, grade, schoolName

			Encapsulate all the fileds (at least encapsulate two fields manually)
					requirements:
						1. age should not be set less than 5 or greater than 90
						2. gender should not be set to any character other than: 'M' and 'F'
						3. grade should not be set to any characters other than: 'A', 'B', 'C', 'D', and 'F'

			Add a constructor that can set all teh fields when the object is created
						(requirements of fields in the above must be applied)


			Methods:
				study()
				toString()


Encapsulation: hiding the fields by giving private access modifiers

			  use getter/setter to read/write the private data


			  Getter (Read Only): public instance method
			  					  Return type is not void
			  					  Return type must match with private instance variable' data type
			  					  Does not pass any parameter
			  					  Returns the private instance variables value

			  Setter (Write Only): public instance method
			  					   Return type is void
			  					   Passes a parameter
			  					   Parameter' data type must match with private instance variable' data type
			  					   reassigns the private instance variable to given argument

        use the data:
	        1. read
	        2. write


Inheritance Topic:

		Is A relation
		extends keyword
		super keyword & constructor
		Types of Inheritance
		Is A relation vs Has A relation
		Method Overriding

Inheritance (Is A relation)

        • Used for creating an “is a” relationship among the classes
        • When an “is-a” relationship exists between objects, it means that the specialized
          object has all of the characteristics of the general object.
        • It allows one class to inherit the features (variables & methods) of an another class

    Exp :
        *** The keyword used for inheritance is "extends"


            public class Dog extends Animal {
                         Sub         Parent
            }

            *** Animal is called SUPER class and Dog is called SUB class
                                        OR
            *** Animal is called PARENT class and Dog is called CHILD class
                extends

            ==> Parent only gives and Child only takes....


        Super & Sub Classes (Is A relation)

            • Super Class: The class whose features are inherited is known as super class (or a
              base class or a parent class), common features must be in super class

            • Sub Class: The class that inherits the other class is known as sub class (derived class,
              or child class). The subclass can add its own fields and methods in addition to the
              superclass fields and methods.



        What is inherited to sub class?

        All the accessible variables & methods (depending on the access modifier)
            • Private variables and methods are not inherited.
            • Constructors are not inherited, but child class must call one of parent class’ constructor


        Calling the Super Class Constructor

            • If parent class has default constructor, sub class calls it implicitly, otherwise
              super class’ constructor need to be called explicitly in the sub class
            • The super keyword refers to an object’s super class. We can use the super
              key word to call a superclass constructor


        Super keyword

            • super() is used to call Parent class constructor from Child class constructor
            • If parent class has default (No-Argument) constructor, compiler will put super() automatically
            • If parent class only has constructor with parameters, then child constructor MUST
              make a matching super(params) call


        Types of Inheritance

            • Single Inheritance        : Sub classes inherit the features of one super class
                B -> A

            • Hierarchical Inheritance  : Once class serves as superclass for more than one sub class
                B -> A,    C -> A,      D -> A

            • Multi Level Inheritance   : Subclass will be inheriting a Super Class and as well as the
              subclass also act as the Super Class to the other class
                B -> A,     C -> B

            • Multiple Inheritance      : Java DOES NOT support multiple inheritance with classes. One
              class can not have more than one superclass and inherit features from all parent class
               C -> A,      C -> B

            *** Child class can not be parent class of its parent class


    import vs extends:
		import: borrowing
		extends: owning

	inherit -> pass it through
	import -> let using



Task:

	Animal:
		name, breed, gender, size, age, color
		setInfo(), eat(), drink(), move(), sleep(), toString()


	Dog extends Animal:
			bark()

	Cat extends Animal:
			scratch()

	Tiger extends Animal:
			roar()

	Fish extends Animal:
			swim()






lunch task:

	Employee:
		name, gender, age, jobTitle, id, salary, companyName
		setInfo(), work(), toString()


	Tester

	Developer

	Driver

	Teacher


















