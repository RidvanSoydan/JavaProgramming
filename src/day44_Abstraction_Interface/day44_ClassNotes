Java Day44
Topics: Abstraction Continue
				Interface Intro

Package name: day44_Abstraction

Warmup task:
	Animal Task:
		Create an abstract class named Animal:
			Variables:
				name, breed(final), gender(final),  age, size, color(final)

			Encapsulate all the fields

			Add a cosntructor that can set all the fields

			Methods:
				eat(); ==> different animals eat different foods
				drink() ==> all the animals drink water
				toString() ==> to display the full info of the animal

		Create the following subclasses of Animal:
				Dog
					eat(): eats Pizza

				Cat
					eat(): eats Biryani

				Tiger
					eat(): eats deer

				Parrot
					eat(): eats chocolate

				Eagle
					eat(): eats snake

    new Test.getClass().getSimpleName();

OOP Abstraction: concentrating on essentials (what it is),
                 not worrying about the details/implementation (how it's done)

		Abstract method: A method without the implementation/body
		                 (When abstract method created and overridden many times just one method will be created in the heap)

							meant to be overridden

				area();
				perimeter();
				...
				eat();
				..

		2 ways to achieve the abstraction:
				1. Abstract class
				2. Interface



	Abstract class: meant to be super class (parent)
					can not be final
					Not concrete so we can not create object. Objects must be concrete
                    Can have constructor but we cannot create object with that constructor
					Can have all the methods, variables, and blocks of non-abstract class + abstract methods

    Interface

         • It’s a template, a blueprint of a class
         • Interface keyword is used to create interface
         • Specifies the behavior(s) that a class should implement
         • Provides additional methods that subclass(es) need.
         • We can achieve 100% abstraction using interfaces
         • Interface is not a class, it can be parent of other interfaces


Animal Task:
	interface Swimmable:
		swim()

	interface Flyable:
		 fly();

	interface Wild:
		hunt();

	interface Playable:
		play();

	Abstract Animal:
		 eat()
		 drink()



   Dog extends Animal implements Playable, Swimmable

   Cat extends Animal implements Playable

   Cow extends Animal implements Playable

   Horse extends Animal implements Playable

   Parrot extends Animal implements Playable, Flyable

   Tiger extends Animal implements Wild

   Lion extends Animal implements Wild

   Eagle extends Animal implements Wild, Flyable

   Falcon extends Animal implements Wild, Flyable

   Dolphin extends Animal implements Playable, Swimmable

   Shark extends Animal implements Wild, Swimmable

   Duck extends Animal implements Swimmable, Flyable, Playable

   Java extends Animal implements Swimmable, Flyable, Playable, Wild

   ...



Person implements Swimmable, Playable

Boat implements Swimmable

Airplane implements Flyable

CydeoCar implements Swimmable, Flyable






















