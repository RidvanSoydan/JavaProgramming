Java Day41
Topics: Exceptions Intro

Package name: day41_Exceptions


Access Modifiers:
		public > protected > default > private


Final Keyword: unchangeable

		Variables: can not be reassigned

		Methods: can not be overridden

		Classes: can not be inherited (can not be parent)


Exceptions  :
        • An unwanted or unexpected event
        • Occurs during the compile time or during the runtime
        • There are two categories of exceptions: checked exception and unchecked exception
        • To prevent exceptions from crashing our program, we must write code that detects
          and handles them

Exceptions Topics   :
		1. Unchecked vs Checked
		2. try & catch blocks
		3. Multi-catch block
		4. finally block
		5. throws keyword
		6. throw keyword

Exceptions: unexpected or unwanted events

		Unchecked (unexpected event)    : occurs during the runtime

					all the RuntimeExceptions are unchecked exceptions

		checked (unwanted event)        : occurs during the compile time

					all the exceptions that are not RuntimeExceptions are checked exception


    Unchecked Exceptions
        • Exceptions that are not checked at compile time
        • Occurs DURING THE RUNTIME
        • Code will compile even if we do not handle them
        • They HAVE IS A relationship with RuntimeException class (parent class of all exceptions)

    checked Exceptions
        • Exceptions that are checked at compile time
        • Occurs DURING THE COMPILE TIME
        • Code will not compile even if we do not handle them
        • They DO NOT HAVE IS A relationship with RuntimeException class

    Errors
        • Indicates that an illegal operation is being performed
        • Occurs during the during the runtime only
        • They can not be recovered and not recommended to handle them

            OutOfMemoryError: heap memory is full


Exception handling :

		1. Try & Catch blocks: used for handling checked and unchecked exceptions

						try{
							exception code

						}catch (ExceptionClass  e){
							e.printStackTrace();
						}

            • When runtime exception happens, java will catch it and assigns to a variable in catch block
            • After it is successfully caught, we can use the variable and call some methods on the
              exception object
            • Popular methods of exception objects are:
                    • printStackTrace(): prints a stack trace (full details) of the exception
                    • getMessage(): returns only brief description of the exception


			Multi-catch block   : parent exception type can not be placed before the child exception type

                        • If the code in the try block will be capable of
                        throwing more than one type of exception
                        • To specify all the possible exceptions that
                        could be thrown
                        • Parent exception class can not be placed
                        before child exception class

			finally block       : always gets executed regardless of the exception is being handled or not handled
                                  to stop the execution of the finally block: System.exit(0)

                        • An optional block that can be given after last catch block
                        • Always executed after try & catch blocks whether an exception occurs or not

        Interview Question:

        Difference between final vs finally vs finalize.

            final   : is a KEYWORD for variables, methods, classes and make them unchangeable.

            finally : is a BLOCK. optional for try&catch (last block) in exception handling.
                      It always get executed, if we manually not terminate the program.

            finalize: is a METHOD that the garbage collector calls it to destroy the object.
                      It comes from Object class and every object has finalize method.











