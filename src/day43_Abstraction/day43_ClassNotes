Java Day43
Topic: Abstraction Intro
			Abstract Method
			Abstract class

package name: day43_Abstraction

Exception:
	checked & unchecked
	try & catch
	throws
	throw

throw new RuntimeException("Exception Message");



OOP Encapsulation: hiding the data

OOP Inheritance: creating IS A relation between classes (parent/child  or super/sub)

		method overriding: giving different implementatiosn to the method



Abstraction Topics:
		Abstract Method
		Abstract Class
		Interface

		abstract class vs class
		abstract class vs interface


Abstraction : focusing on the essentials without worrying about the small details (implementations) of the method

        • Process of hiding implementation details from the user
        • Only the functionality will be provided to the user
        • Focusing on the essential qualities of something rather than one specific example.
          (Ignoring the irrelevant & unimportant)
        • User will have the information on what the object does instead of how it does


Abstract Method

        • A method that does not have body, only signature
        • A method that’s meant to be overridden
        • Abstract keyword is used to create abstract method


Abstract Method Rules

        • An abstract method can not be static
        • An abstract method can not be final
        • An abstract method can not have private access modifier
        • An abstract method does not have body
        • An abstract method can only be created in an abstract class or in an interface


Abstract Class

        • A class that’s meant to be a parent (super) class
        • Goal is to provide reusable variables and methods to sub classes
        • Abstract keyword is used to create the abstract class
        • An abstract class can not be instantiated


        *** Super (parent) class is responsible to provide the variables and methods that are needed to
            the all the sub classes without worrying about the small details

        *** Sub (child) classes are responsible for providing the implementations that are needed


Creating Object
        • Abstract class is meant to be inherited only, not meant to be instantiated
        • Abstract class is not a concrete class and object has to be concrete
        • A sub class of abstract class is called concrete class and it can be instantiated
        • A Concrete class must implement all the inherited abstract methods

    Regular class                                   Abstract class
    Can have constructors (instances and statics)   Can have constructors (instances and statics)
    Regular class can be instantiated               Abstract class can not be instantiated
    Regular class can not have abstract method      Abstract class can have abstract method
    Regular class can be declared as final          Abstract class can not be declared as final



abstract class Device{
	turnOff();

}

abstract class Phone extends Device{
	call();
}


class Iphone extends Phone{

}

class Samsung extends Phone{

}



Car Task:
	abstract Car:
		make, model, color, year, price....
		start();
		stop()

	Honda extends Car:
		start(): twist the key to ignition

	Adui extends Car:
		start(): push the start button

	Tesla extends Car:
		start(): Say "Start"



Employee task:
		abstract Person:
			name, age, gender(final)

			eat();
			sleep();

		abstract Employee extends Person:
			 id(final), jobTitle, salary...

			work();


		Tester
			work(): testing


		Developer
			work(): developing


		Teacher
			work(): teaching


		Driver
			work(): driving

		...


Shape task:

	Shape:
		name

		Encapsulate the fields

		Add constructor to set the fields

		area()
		perimeter()

		toString(): name, area, perimeter


	Create the following subclasses of Shape and add the aditional features that are needed:

				Rectangle:
					area(): w * l
					perimeter(): 2 * (w+l)

				Square:
					area(): s * s
					perimeter: 4 * s

				Circle:
					area(): r * r * pi
					perimeter(): 2 * r * pi



Animal task:

		abstract Animal

			eat();

		Dog

		Cat

		Tiger

		Eagle
















